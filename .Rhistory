violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_10.csv", train_cr = 1, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(100) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
df_list <- make_df(file_name = "Data/word_game_info_base_10.csv", train_cr = 1, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(100) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
# par(mfrow = c(3, 3))
# plot_map <- map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# # 从所有尝试中得到差异最小1组
# violence_best_retain <- res[res$diff == min(res$diff), ]
# violence_best_retain
# 使用最好的一组,设定需要预测天数的次留,并画图 -------------------------------------------------
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain <- read.csv("parameter_2019_04_10_11_03_27.csv")
violence_best_retain
violence_best_retain$ring_retain_new
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain <- read.csv("parameter_2019_04_10_11_03_27.csv", stringsAsFactors = FALSE)
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
debugonce(get_prediction_daily)
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
tail_diff
tail(info_df, diff_days)
debugonce(get_prediction_daily)
get_prediction_daily(df_list = df_list,
type = "train", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
tail_diff
tail(info_df, diff_days)
tail_diff <- imap_dbl(tail_diff, ~ multiply_by(.x, diff_base^.y)) %>% # 越近期权重越大
abs() %>%
median() %>%
round(5)
tail_diff
tail(info_df, diff_days) %>% summarize(min(Date))
tail(info_df, diff_days) %>% summarize(min(Date), max(Date))
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.5,
start = 0.2)
}
library(LTV)
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 30,
start = 0.2)
}
library(LTV)
equire(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 30,
start = 0.2)
}
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 30,
start = 0.2)
}
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
debugonce(make_df)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
diff_days
diff_days
if_else(diff_days <= df_list$train_days, df_list$train_days, diff_days)
diff_days <= df_list$train_days
df_list$train_days
diff_days
as.integer(days * train_cr)
class(as.integer(days * train_cr))
df_list$train_days <- as.integer(days * train_cr)
if_else(diff_days <= df_list$train_days, df_list$train_days, diff_days)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 30,
start = 0.2)
}
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
debugonce(get_prediction_daily)
violence_best_retain <- read.csv("parameter_2019_04_10_11_03_27.csv", stringsAsFactors = FALSE)
get_prediction_daily(df_list = df_list,
type = "train", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
df_fit
test_days
diff_days
diff_date
diff_days
df_list$diff_days
debugonce(make_df)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
diff_days
info_df
days
df_list$train_days
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
df_list
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 30,
start = 0.2)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_days = 60,
start = 0.2)
}
library(LTV)
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/dau_appstore.csv",
n = 10000,
train_cr = i * 0.1,
smooth = TRUE,
diff_days = 60,
start = 0.2)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/dau_appstore_new.csv",
n = 10000,
train_cr = i * 0.1,
smooth = TRUE,
diff_days = 60,
start = 0.2)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/dau_appstore_new.csv",
n = 10000,
train_cr = i * 0.1,
smooth = FALSE,
diff_days = 60,
start = 0.2)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/dau_appstore_new.csv",
n = 10000,
train_cr = i * 0.1,
smooth = TRUE,
diff_days = 60,
start = 0.2)
}
gc()
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/dau_appstore_new.csv",
n = 10000,
train_cr = i * 0.1,
smooth = TRUE,
diff_days = 120,
start = 0.2)
}
roxygen2::roxygenise()
roxygen2::roxygenise()
?get_fit
roxygen2::roxygenise()
?get_fit
iconv("描述", from = "UTF-8", to = "GB2312")
roxygen2::roxygenise()
?get_fit
?devtools::document
browseVignettes("roxygen2")
devtools::document()
?get_fit
devtools::document()
?get_fit
?get_fit
devtools::document
roxygen2::roxygenise
devtools::document
devtools::document()
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
violence_best_retain <- read.csv("parameter_2019_04_10_11_03_27.csv", stringsAsFactors = FALSE)
get_prediction_daily(df_list = df_list,
type = "train", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_days = 30)
violence_best_retain <- read.csv("parameter_2019_04_10_11_03_27.csv", stringsAsFactors = FALSE)
get_prediction_daily(df_list = df_list,
type = "train", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
install.packages("plumber"
)
pr <- plumber::plumb("plumber.R")
pr$run(host = "0.0.0.0", port = 4267)
pr <- plumber::plumb("test_api/plumber.R")
pr$run(host = "0.0.0.0", port = 4267)
