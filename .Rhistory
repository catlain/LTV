.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_10.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_10.csv", train_cr = 0.8, diff_cr = 1)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info1.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info1.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info1.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info2.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info2.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/info2.csv", train_cr = 0.8, diff_cr = 0.25)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
