}
}
res <- list()
res$ring_retain_new <- ring_retain_new
res$ring_retain_old <- runif(1, ring_retain_new[3], max) # 长期衰减在 14 日留存环比和 max 之间
return(res)
}
debugonce(get_ring_retain)
get_ring_retain()
lift
lift
lift
lift
lift
min(start * lift, max)
load_all()
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = TRUE,
file_name = "word_game_info_base_10.csv"
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(100) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 10))
best_res <- summarise_all(top_res, median)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
arrange(res, diff) %>%
head(100)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
get_ring_retain(start = 0.3, max = 0.99999)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(100) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, median)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
par(mfrow = c(3, 3))
map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(500) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, median)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(200) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(200) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
plot_map <- map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, median)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
load_all()
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
debugonce(get_prediction_daily)
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
retain_users_old_daily_true
ring_retain_old_rates
retain_users_old_daily_true
retain_users_old_daily
retain_users_daily
ring_retain_old
load_all()
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
load_all()
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
load_all()
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(200) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
plot_map <- map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）k
#####################################################################
prediction_retain_one = 0.48,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:10000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(diff_days = 30, # 需要比较的近期天数
diff_base = 1.02, # 近期差异加权系数（乘方）
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE,
file_name = "word_game_info_base_10.csv"
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(200) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
par(mfrow = c(3, 3))
plot_map <- map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
require(LTV)
require(parallel)
require(doParallel)
require(tidyr)
no_cores <- detectCores() - 1
checkpoint::setSnapshot("2019-04-01")
install.packages("rlang")
require(LTV)
require(parallel)
require(doParallel)
require(tidyr)
no_cores <- detectCores() - 1
install.packages("customLayout")
install.packages("customLayout")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
install.packages("customLayout")
checkpoint::setSnapshot("2019-04-01")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
install.packages("customLayout")
Sys.setenv(http_proxy="")
install.packages("customLayout")
Sys.setenv(https_proxy="127.0.0.1:49864")
Sys.setenv(http_proxy="127.0.0.1:49864")
install.packages("customLayout")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
Sys.setenv(https_proxy="http://127.0.0.1:49864")
install.packages("customLayout")
Sys.setenv(https_proxy="")
Sys.setenv(http_proxy="")
install.packages("customLayout")
install.packages("customLayout")
Sys.getenv(https_proxy="")
Sys.getenv(https_proxy)
Sys.getenv("https_proxy")
Sys.getenv("http_proxy")
install.packages("customLayout")
checkpoint::setSnapshot("2019-04-01")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
install.packages("customLayout")
install.packages("customLayout")
install.packages("customLayout")
Sys.setenv(http_proxy="http://127.0.0.1")
Sys.setenv(https_proxy="http://127.0.0.1")
install.packages("customLayout")
Sys.setenv(https_proxy="")
Sys.setenv(http_proxy="127.0.0.1:49864")
install.packages("customLayout")
Sys.setenv(https_proxy="127.0.0.1:49864")
install.packages("customLayout")
Sys.setenv(https_proxy="")
Sys.setenv(http_proxy="")
install.packages("customLayout")
checkpoint::setSnapshot("2019-04-01")
install.packages("customLayout")
install.packages("customLayout")
install.packages("customLayout")
checkpoint::setSnapshot(Sys.Date())
install.packages("customLayout")
install.packages("customLayout")
install.packages("gdtools")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
Sys.setenv(https_proxy="http://127.0.0.1:49864")
install.packages("gdtools")
Sys.setenv(https_proxy="")
Sys.setenv(http_proxy="")
install.packages("gdtools")
Sys.setenv(https_proxy="http://127.0.0.1:49864")
install.packages("gdtools")
devtools::install_github('davidgohel/gdtools')
options(download.file.method = "wininet")
install.packages("gdtools")
options(download.file.method = "libcurl")
install.packages("gdtools")
Sys.setenv(http_proxy="http://127.0.0.1:49864")
Sys.setenv(https_proxy="http://127.0.0.1:49864")
install.packages("gdtools")
checkpoint::setSnapshot(Sys.Date())
checkpoint::setSnapshot(Sys.Date())
checkpoint::setSnapshot(Sys.Date()-1)
install.packages("customLayout")
Sys.setenv(https_proxy="http://127.0.0.1:49864")
