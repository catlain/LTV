smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.8, diff_cr = 0.5)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
# par(mfrow = c(3, 3))
# plot_map <- map(paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), ~hist(top_res[[.x]], breaks = 20))
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# # 从所有尝试中得到差异最小1组
# violence_best_retain <- res[res$diff == min(res$diff), ]
# violence_best_retain
# 使用最好的一组,设定需要预测天数的次留,并画图 -------------------------------------------------
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
seq_len(3)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
get_fit
library(LTV)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 100,
train_cr = 0.8,
diff_cr = 0.5)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = 0.8,
diff_cr = 0.5)
for (i in 4:9) {
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 2000,
train_cr = i * 0.1,
diff_cr = 0.3)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.3)
}
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = 0.7,
diff_cr = 0.3)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = 0.7,
diff_cr = 0.1)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.3)
}
debugonce(get_prediction_daily)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.8, diff_cr = 0.5)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
tail_diff
plot(info_df$diff_rate)
plot(tail_diff)
plot(imap_dbl(tail_diff, ~ multiply_by(.x, diff_base^.y)))
tail_diff
tail_diff*100
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
cl <- makeCluster(no_cores)
registerDoParallel(cl)
start_time <- Sys.time()
res <- foreach(i = 1:50000,
.combine = rbind,
.packages = c("purrr",
"dplyr",
"stringr",
"forecast",
"LTV"
)) %dopar% {
res <- get_ring_retain(start = 0.3, max = 0.99999)
tryCatch({
get_prediction_daily(df_list = df_list, # 数据集
type = "train", # 以训练集拟合参数
ring_retain_new = res$ring_retain_new,
ring_retain_old = res$ring_retain_old,
csv = FALSE,
plot = FALSE,
message = FALSE,
smooth = FALSE
)
}, error = function(e) e)
}
end_time <- Sys.time()
message("总花费时长: ", round(as.numeric(end_time) - as.numeric(start_time), 3), "秒")
stopCluster(cl)
# 从所有尝试中得到差异最小的100组,取中位数
top_res <- arrange(res, diff) %>%
head(10) %>%
separate(ring_retain_new, sep = ",", paste0("retain_new", c(2, 4, 7, 16, 30, 120, 180, 360)), convert = TRUE) %>%
select(contains("retain_new"), ring_retain_old)
best_res <- summarise_all(top_res, mean)
violence_best_retain <- list()
violence_best_retain$ring_retain_new <- select(best_res, contains("retain_new")) %>%
`[`(1,) %>%
paste0(collapse = ",")
violence_best_retain$ring_retain_old <- best_res$ring_retain_old
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
violence_best_retain$ring_retain_new # 新用户环比参数
violence_best_retain$ring_retain_old # 老用户环比参数
get_prediction_daily
debugonce(get_prediction_daily)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
plot(info_df$retain_users_daily)
plot(info_df$DAU)
plot(info_df$diff_rate %>%
na.omit())
plot(tail_diff)
plot(imap_dbl(tail_diff, ~ multiply_by(.x, diff_base^.y)))
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.3)
}
library(LTV)
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.1)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 10000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.01)
}
test <- c(1,2,3,4)
test[-4]
tail(test, 2)
tail(test, 2)[1]
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
library(LTV)
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.01)
}
library(LTV)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.01)
}
library(LTV)
?colors
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.01)
}
library(LTV)
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.5,
start = 0.2)
}
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
？scale_colour_manual
?scale_colour_manual
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.5,
start = 0.2)
}
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
cbPalette
library(LTV)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
get_prediction_daily
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
library(LTV)
# 暴力猜参数 -------------------------------------------------------------------
df_list <- make_df(file_name = "Data/word_game_info_base_3.csv", train_cr = 0.7, diff_cr = 0.3)
# info_df <- read.csv("info.csv")
get_prediction_daily(df_list = df_list,
type = "test", # 以训练集拟合参数
#####################################################################
prediction_retain_one = 0.33,  # 需要预测的新用户次留(计算总留存天数)
life_time_year = 1, # 预测生命周期年数
#####################################################################
ring_retain_new = violence_best_retain$ring_retain_new,
ring_retain_old = violence_best_retain$ring_retain_old,
csv = FALSE,  # 是否输出 prediction.csv
plot = TRUE,  # 是否作图
message = TRUE, # 是否打印信息
smooth = FALSE
)
library(LTV)
require(LTV)
require(parallel)
require(doParallel)
require(dplyr)
require(purrr)
require(tidyr)
no_cores <- detectCores() - 1
# 暴力猜参数 -------------------------------------------------------------------
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.5,
start = 0.2)
}
for (i in 4:9) {
message("i : ", i)
get_fit(no_cores = no_cores,
file_name = "Data/word_game_info_base_3.csv",
n = 5000,
train_cr = i * 0.1,
diff_cr = 0.3,
start = 0.2)
}
